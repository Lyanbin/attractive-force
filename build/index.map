{"version":3,"sources":["attractiveForce.js","index.js"],"names":["AttractiveForce","container","opts","document","querySelector","config","assign","current","max","canvas","initCanvas","canvasCtx","getContext","points","generatePoints","all","concat","bindEvents","fireCancas","style","position","createElement","cssText","zIndex","opacity","width","clientWidth","height","clientHeight","appendChild","length","count","array","Array","fill","map","item","Math","random","addEventListener","e","x","clientX","offsetLeft","y","clientY","offsetTop","ctx","clearRect","i","d","xDistance","yDistance","totalDistance","forEach","index","xDirection","yDirection","fillRect","beginPath","lineWidth","strokeStyle","color","moveTo","lineTo","stroke"],"mappings":"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","file":"index.map","sourceRoot":"../lib","sourcesContent":["export default class AttractiveForce {\n    \n    constructor (container, opts) {\n        this.container = container || document.querySelector('body');\n        this.config = {\n            zIndex: -100,\n            opacity: .5,\n            color: '255, 125, 125',\n            count: 100,\n            max: 10000,\n        }\n        Object.assign(this.config, opts);\n        this.current = {\n            x: null,\n            y: null,\n            max: this.config.max\n        }\n        this.canvas = this.initCanvas();\n        this.canvasCtx = this.canvas.getContext('2d');\n        this.points = this.generatePoints();\n        this.all = this.points.concat([this.current]);\n\n        this.bindEvents();\n\n        \n        requestAnimationFrame(() => {\n            this.fireCancas();\n        });\n    }\n\n    initCanvas() {\n        this.container.style.position = 'relative';\n        let canvas = document.createElement('canvas');\n        canvas.style.cssText = `display:block;position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:${this.config.zIndex};opacity:${this.config.opacity}`;\n        // 这里宽高不能用百分比，不然就坏了，画布会随着页面的resize被压缩\n        canvas.width = this.container.clientWidth;\n        canvas.height = this.container.clientHeight;\n\n        this.container.appendChild(canvas);\n        return canvas;\n    }\n\n    generatePoints() {\n        let length = this.config.count;\n        let array = Array(length).fill(0).map((item) => {\n            item = {\n                x: Math.random() * this.canvas.width,\n                y: Math.random() * this.canvas.height,\n                xDirection: 2 * Math.random() -1, // 方向，也是速度\n                yDirection: 2 * Math.random() -1,\n                max: this.config.max\n            }\n            return item;\n        });\n        return array;\n    }\n\n    bindEvents() {\n        window.addEventListener('mousemove', (e) => {\n            this.current.x = e.clientX - this.container.offsetLeft;\n            this.current.y = e.clientY - this.container.offsetTop;\n        });\n        window.addEventListener('resize', (e) => {\n            this.canvas.width = this.container.clientWidth;\n            this.canvas.height = this.container.clientHeight;\n        });\n\n    }\n\n    fireCancas() {\n        const ctx = this.canvasCtx;\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const points = this.points;\n        const all = this.all;\n\n        ctx.clearRect(0, 0, width, height);\n\n        let i, e, d, xDistance, yDistance, totalDistance;\n\n        points.forEach((item, index) => {\n            item.x += item.xDirection || 0;\n            item.y += item.yDirection || 0;\n            \n            if (item.x > width || item.x < 0) {\n                item.xDirection *= -1;\n            }\n            if (item.y > height || item.y < 0) {\n                item.yDirection *= -1;\n            }\n            ctx.fillRect(item.x, item.y, 1, 1);\n\n            for (i = index + 1; i < all.length; i++) {\n                e = all[i];\n                if (e.x && e.y) {\n                    xDistance = item.x - e.x;\n                    yDistance = item.y - e.y;\n                    totalDistance = xDistance * xDistance + yDistance * yDistance;\n\n                    if (totalDistance < e.max) {\n                        if (e === this.current && totalDistance >= e.max / 2) {\n                            item.x -= 0.03 * xDistance; \n                            item.y -= 0.03 * yDistance;\n                        }\n                        d = (e.max - totalDistance) / e.max;\n                        ctx.beginPath();\n                        ctx.lineWidth = d / 2;\n                        ctx.strokeStyle = `rgba(${this.config.color}, ${d + 0.2})`;\n                        ctx.moveTo(item.x, item.y);\n                        ctx.lineTo(e.x, e.y);\n                        ctx.stroke();\n                    }\n                }\n            }\n        });\n        requestAnimationFrame(() => {\n            this.fireCancas();\n        });\n    }\n}","import AttractiveForce from './attractiveForce';\n\nexport default AttractiveForce;"]}